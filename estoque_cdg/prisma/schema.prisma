// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  categoryId  String
  quantity    Int      @default(0) // Quantidade total em unidades
  price       Float    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category  Category   @relation(fields: [categoryId], references: [id])
  movements Movement[]

  @@map("products")
}

model Movement {
  id                String      @id @default(cuid())
  productId         String
  type              MovementType // ENTRADA ou SAIDA
  packageQuantity   Int         @default(0) // Número de embalagens/caixas
  unitsPerPackage   Int         @default(1) // Quantas unidades tem em cada embalagem (variável por movimentação)
  unitQuantity      Int         @default(0) // Unidades individuais (avulsas)
  totalUnits        Int         // Total calculado: (packageQuantity * unitsPerPackage) + unitQuantity
  packageType       String?     // Tipo da embalagem: "Caixa", "Resma", "Rolo", etc.
  date              DateTime    @default(now())
  userId            String?     // Usuário responsável
  user              String      @default("Sistema") // Nome do usuário
  reason            String      // Motivo da movimentação
  notes             String?     // Observações adicionais
  createdAt         DateTime    @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("movements")
}

enum Role {
  USER
  ADMIN
}

enum MovementType {
  ENTRADA
  SAIDA
}